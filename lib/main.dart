import 'package:flutter/material.dart';
import 'package:flutter/services.dart';
import 'package:firebase_core/firebase_core.dart';
import 'firebase_options.dart';

import 'screens/auth/login_screen.dart';
import 'screens/auth/register_screen.dart';
import 'screens/auth/reset_password_screen.dart';
import 'screens/permission/permission_screen.dart';
import 'screens/main/sms_history_screen.dart'; // ‡πÄ‡∏û‡∏¥‡πà‡∏° import
import 'screens/main/main_screen.dart';
import 'screens/main/home_screen.dart';
import 'screens/main/scan_screen.dart';
import 'screens/main/stats_screen.dart';
import 'screens/main/user_screen.dart';
import 'screens/main/settings_screen.dart';
import 'services/sms_model_service.dart'; // import service ‡∏Ç‡∏≠‡∏á‡πÄ‡∏£‡∏≤

  // ‚úÖ Global Notifiers
  final ValueNotifier<ThemeMode> themeModeNotifier = ValueNotifier(ThemeMode.system);
  final GlobalKey<NavigatorState> navigatorKey = GlobalKey<NavigatorState>();

  // ‚úÖ Native Channel communication - ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡∏ä‡∏∑‡πà‡∏≠‡πÉ‡∏´‡πâ‡∏ï‡∏£‡∏á‡∏Å‡∏±‡∏ö Android
  const MethodChannel methodChannel = MethodChannel('message_monitor');
  const EventChannel eventChannel = EventChannel('com.example.anti_scam_ai/accessibility'); // ‚úÖ ‡πÅ‡∏Å‡πâ package name ‡πÉ‡∏´‡πâ‡∏ï‡∏£‡∏á

Future<void> main() async {
  WidgetsFlutterBinding.ensureInitialized();
  await Firebase.initializeApp(options: DefaultFirebaseOptions.currentPlatform);

  // ‡πÇ‡∏´‡∏•‡∏î‡πÇ‡∏°‡πÄ‡∏î‡∏• AI ‡πÅ‡∏•‡∏∞ tokenizer ‡∏Å‡πà‡∏≠‡∏ô‡πÄ‡∏£‡∏¥‡πà‡∏°‡πÅ‡∏≠‡∏õ
  await SMSModelService.init();

  runApp(const MyApp());
}

  class MyApp extends StatefulWidget {
    const MyApp({super.key});

    @override
    State<MyApp> createState() => _MyAppState();
  }

  class _MyAppState extends State<MyApp> {
    @override
    void initState() {
      super.initState();
      requestPermissions();
      listenToNativeEvents();
    }

    // ‚úÖ ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡∏Å‡∏≤‡∏£‡∏Ç‡∏≠‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡πå‡πÉ‡∏´‡πâ‡πÄ‡∏£‡∏µ‡∏¢‡∏Å method ‡∏ó‡∏µ‡πà‡∏°‡∏µ‡πÉ‡∏ô Android
    Future<void> requestPermissions() async {
      try {
        // ‡πÄ‡∏£‡∏µ‡∏¢‡∏Å‡∏Ç‡∏≠‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡πå SMS ‡∏Å‡πà‡∏≠‡∏ô
        final smsGranted = await methodChannel.invokeMethod<bool>('requestSmsPermission');
        debugPrint('üì± SMS Permission granted: $smsGranted');
        
        // ‡πÄ‡∏£‡∏µ‡∏¢‡∏Å‡∏Ç‡∏≠‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡πå Notification Listener
        final notifGranted = await methodChannel.invokeMethod<bool>('requestNotificationListenerPermission');
        debugPrint('üîî Notification Permission granted: $notifGranted');
        
        // ‡∏´‡∏≤‡∏Å‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏Ç‡∏≠‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡πå Accessibility (‡∏ñ‡πâ‡∏≤‡∏°‡∏µ)
        try {
          final accessibilityGranted = await methodChannel.invokeMethod<bool>('requestAccessibilityPermission');
          debugPrint('‚ôø Accessibility Permission granted: $accessibilityGranted');
        } catch (e) {
          debugPrint('‚ÑπÔ∏è Accessibility permission method not found: $e');
        }
        
      } catch (e) {
        debugPrint('‚ùå Error requesting permissions: $e');
        // ‡πÅ‡∏™‡∏î‡∏á dialog ‡πÅ‡∏à‡πâ‡∏á‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ
        final context = navigatorKey.currentContext;
        if (context != null) {
          showDialog(
            context: context,
            builder: (_) => AlertDialog(
              title: const Text('‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î'),
              content: Text('‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏Ç‡∏≠‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡πå‡πÑ‡∏î‡πâ: $e'),
              actions: [
                TextButton(
                  child: const Text('‡∏õ‡∏¥‡∏î'),
                  onPressed: () => Navigator.of(context).pop(),
                ),
              ],
            ),
          );
        }
      }
    }

    // ‚úÖ ‡∏ü‡∏±‡∏á EventChannel ‡∏à‡∏≤‡∏Å Native ‡πÅ‡∏•‡πâ‡∏ß‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô
    void listenToNativeEvents() {
      eventChannel.receiveBroadcastStream().listen((event) {
        debugPrint('üì≤ Event received: $event');

        final context = navigatorKey.currentContext;
        if (context != null) {
          showDialog(
            context: context,
            builder: (_) => AlertDialog(
              title: const Text('‡∏ï‡∏£‡∏ß‡∏à‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ô‡πà‡∏≤‡∏™‡∏á‡∏™‡∏±‡∏¢'),
              content: Text(event.toString()),
              actions: [
                TextButton(
                  child: const Text('‡∏õ‡∏¥‡∏î'),
                  onPressed: () => Navigator.of(context).pop(),
                ),
              ],
            ),
          );
        }
      }, onError: (error) {
        debugPrint('‚ö†Ô∏è EventChannel error: $error');
        
        // ‡πÅ‡∏™‡∏î‡∏á error ‡πÉ‡∏´‡πâ‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡πÄ‡∏´‡πá‡∏ô (‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡πÉ‡∏ô debug mode)
        final context = navigatorKey.currentContext;
        if (context != null) {
          ScaffoldMessenger.of(context).showSnackBar(
            SnackBar(
              content: Text('‡∏Å‡∏≤‡∏£‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠ Native ‡∏°‡∏µ‡∏õ‡∏±‡∏ç‡∏´‡∏≤: $error'),
              backgroundColor: Colors.orange,
            ),
          );
        }
      });
    }

    @override
    Widget build(BuildContext context) {
      return ValueListenableBuilder<ThemeMode>(
        valueListenable: themeModeNotifier,
        builder: (context, themeMode, _) {
          return MaterialApp(
            title: 'Anti-Scam AI',
            navigatorKey: navigatorKey,
            debugShowCheckedModeBanner: false,
            themeMode: themeMode,
            theme: ThemeData(
              brightness: Brightness.light,
              colorSchemeSeed: Colors.deepPurple,
              useMaterial3: true,
            ),
            darkTheme: ThemeData(
              brightness: Brightness.dark,
              colorSchemeSeed: Colors.deepPurple,
              useMaterial3: true,
            ),
            initialRoute: '/',
            routes: {
              '/': (context) => const LoginScreen(),
              '/register': (context) => const RegisterScreen(),
              '/reset-password': (context) => const ResetPasswordScreen(),
              '/permission': (context) => const PermissionScreen(),
              '/main': (context) => MainScreen(themeModeNotifier: themeModeNotifier),
              '/home': (context) => const HomeScreen(),
              '/scan': (context) => const ScanScreen(),
              '/stats': (context) => const StatsScreen(),
              '/profile': (context) => const UserScreen(),
              '/login': (context) => const LoginScreen(),
              '/settings': (context) => SettingsScreen(themeModeNotifier: themeModeNotifier),
              '/history': (context) => const HistoryScreen(),
            },
          );
        },
      );
    }
  }