import 'package:flutter/material.dart';
import 'package:flutter/services.dart';
import 'package:firebase_core/firebase_core.dart';
import 'package:http/http.dart' as http;
import 'dart:convert';
import 'firebase_options.dart';

import 'screens/auth/login_screen.dart';
import 'screens/auth/register_screen.dart';
import 'screens/auth/reset_password_screen.dart';
import 'screens/permission/permission_screen.dart';
<<<<<<< HEAD
import 'screens/main/sms_history_screen.dart';
=======
import 'screens/main/sms_history_screen.dart'; // import history
>>>>>>> dcb51031a26fa5e977b1ab5746bd5a7fb78ac375
import 'screens/main/main_screen.dart';
import 'screens/main/home_screen.dart';
import 'screens/main/scan_screen.dart';
import 'screens/main/stats_screen.dart';
import 'screens/main/user_screen.dart';
import 'screens/main/settings_screen.dart';

import 'services/sms_model_service.dart';

// Global Notifiers
final ValueNotifier<ThemeMode> themeModeNotifier = ValueNotifier(ThemeMode.system);
final GlobalKey<NavigatorState> navigatorKey = GlobalKey<NavigatorState>();

<<<<<<< HEAD
// ‚úÖ Native Channel communication
const MethodChannel methodChannel = MethodChannel('message_monitor');
const EventChannel eventChannel = EventChannel('com.example.anti_scam_ai/accessibility');

// ‚úÖ API Configuration - ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç URL ‡∏ï‡∏£‡∏á‡∏ô‡∏µ‡πâ‡∏´‡∏•‡∏±‡∏á Deploy ‡∏ö‡∏ô Render
class ApiService {
  static const String baseUrl = 'https://backend-api-j5m6.onrender.com/'; // ‚ö†Ô∏è ‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô URL ‡πÉ‡∏´‡πâ‡∏ï‡∏£‡∏á‡∏Å‡∏±‡∏ö Render
  static const String predictEndpoint = '/predict';
  
  // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ú‡πà‡∏≤‡∏ô API
  static Future<Map<String, dynamic>> checkMessage(String message) async {
    final url = Uri.parse('$baseUrl$predictEndpoint');
    
    try {
      debugPrint('üåê Calling API: $url');
      debugPrint('üì§ Message: $message');
      
      final response = await http.post(
        url,
        headers: {
          'Content-Type': 'application/json',
          'Accept': 'application/json',
        },
        body: jsonEncode({'message': message}),
      ).timeout(const Duration(seconds: 30));

      debugPrint('üì• Response status: ${response.statusCode}');
      debugPrint('üì• Response body: ${response.body}');

      if (response.statusCode == 200) {
        final data = jsonDecode(response.body);
        return {
          'success': true,
          'prediction': data['prediction'],
          'isScam': data['prediction'] == 'scam',
        };
      } else {
        return {
          'success': false,
          'error': 'API returned status ${response.statusCode}',
        };
      }
    } catch (e) {
      debugPrint('‚ùå API Error: $e');
      return {
        'success': false,
        'error': 'Network error: $e',
      };
    }
  }
  
  // ‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠ API
  static Future<bool> testConnection() async {
    try {
      final response = await http.get(
        Uri.parse(baseUrl),
        headers: {'Accept': 'text/html'},
      ).timeout(const Duration(seconds: 10));
      
      return response.statusCode == 200;
    } catch (e) {
      debugPrint('‚ùå Connection test failed: $e');
      return false;
    }
  }
}
=======
// Native Channels (‡∏õ‡∏£‡∏±‡∏ö‡πÉ‡∏´‡πâ‡∏ï‡∏£‡∏á‡∏Å‡∏±‡∏ö Android package)
const MethodChannel methodChannel = MethodChannel('message_monitor');
const EventChannel eventChannel = EventChannel('com.example.anti_scam_ai/accessibility');
>>>>>>> dcb51031a26fa5e977b1ab5746bd5a7fb78ac375

Future<void> main() async {
  WidgetsFlutterBinding.ensureInitialized();

  // Initialize Firebase
  await Firebase.initializeApp(options: DefaultFirebaseOptions.currentPlatform);
<<<<<<< HEAD
  
  // ‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠ API ‡πÄ‡∏°‡∏∑‡πà‡∏≠‡πÄ‡∏£‡∏¥‡πà‡∏°‡πÅ‡∏≠‡∏õ
  final connected = await ApiService.testConnection();
  debugPrint('üåê API Connection: ${connected ? "‚úÖ Connected" : "‚ùå Failed"}');
  
=======

  // ‡πÇ‡∏´‡∏•‡∏î‡πÇ‡∏°‡πÄ‡∏î‡∏• AI ‡πÅ‡∏•‡∏∞ tokenizer ‡∏Å‡πà‡∏≠‡∏ô‡πÄ‡∏£‡∏¥‡πà‡∏°‡πÅ‡∏≠‡∏õ (await ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÑ‡∏°‡πà‡πÉ‡∏´‡πâ‡πÅ‡∏≠‡∏õ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏Å‡πà‡∏≠‡∏ô‡πÇ‡∏´‡∏•‡∏î‡πÄ‡∏™‡∏£‡πá‡∏à)
  await SMSModelService.init();

>>>>>>> dcb51031a26fa5e977b1ab5746bd5a7fb78ac375
  runApp(const MyApp());
}

class MyApp extends StatefulWidget {
  const MyApp({super.key});

  @override
  State<MyApp> createState() => _MyAppState();
}

class _MyAppState extends State<MyApp> {
  @override
  void initState() {
    super.initState();
    _requestPermissions();
    _listenToNativeEvents();
  }

  /// ‡∏Ç‡∏≠‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡πå‡∏ó‡∏µ‡πà‡∏à‡∏≥‡πÄ‡∏õ‡πá‡∏ô‡∏ú‡πà‡∏≤‡∏ô MethodChannel
  Future<void> _requestPermissions() async {
    try {
      final smsGranted = await methodChannel.invokeMethod<bool>('requestSmsPermission');
      debugPrint('üì± SMS Permission granted: $smsGranted');

      final notifGranted = await methodChannel.invokeMethod<bool>('requestNotificationListenerPermission');
      debugPrint('üîî Notification Permission granted: $notifGranted');

      try {
        final accessibilityGranted = await methodChannel.invokeMethod<bool>('requestAccessibilityPermission');
        debugPrint('‚ôø Accessibility Permission granted: $accessibilityGranted');
      } catch (e) {
        debugPrint('‚ÑπÔ∏è Accessibility permission method not found: $e');
      }
    } catch (e) {
      debugPrint('‚ùå Error requesting permissions: $e');
<<<<<<< HEAD
      _showErrorDialog('‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î', '‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏Ç‡∏≠‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡πå‡πÑ‡∏î‡πâ: $e');
    }
  }

  // ‚úÖ ‡∏ü‡∏±‡∏á EventChannel ‡∏à‡∏≤‡∏Å Native ‡πÅ‡∏•‡πâ‡∏ß‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ú‡πà‡∏≤‡∏ô AI
  void listenToNativeEvents() {
    eventChannel.receiveBroadcastStream().listen((event) async {
      debugPrint('üì≤ Event received: $event');

      // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ú‡πà‡∏≤‡∏ô AI API
      if (event != null && event.toString().isNotEmpty) {
        final result = await ApiService.checkMessage(event.toString());
        
        final context = navigatorKey.currentContext;
        if (context != null) {
          if (result['success'] == true) {
            if (result['isScam'] == true) {
              // ‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏° Scam
              _showScamAlert(context, event.toString(), result['prediction']);
            } else {
              // ‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏õ‡∏•‡∏≠‡∏î‡∏†‡∏±‡∏¢ - ‡∏≠‡∏≤‡∏à‡∏à‡∏∞‡πÑ‡∏°‡πà‡∏ï‡πâ‡∏≠‡∏á‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô ‡∏´‡∏£‡∏∑‡∏≠‡πÅ‡∏à‡πâ‡∏á‡πÅ‡∏ö‡∏ö‡πÄ‡∏ö‡∏≤‡πÜ
              debugPrint('‚úÖ Message is safe: $event');
              _showSafeNotification(context);
            }
          } else {
            // API Error
            _showErrorDialog('‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î API', result['error'] ?? 'Unknown error');
          }
        }
      }
    }, onError: (error) {
      debugPrint('‚ö†Ô∏è EventChannel error: $error');
      _showErrorSnackBar('‡∏Å‡∏≤‡∏£‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠ Native ‡∏°‡∏µ‡∏õ‡∏±‡∏ç‡∏´‡∏≤: $error');
    });
=======
      final context = navigatorKey.currentContext;
      if (context != null) {
        showDialog(
          context: context,
          builder: (_) => AlertDialog(
            title: const Text('‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î'),
            content: Text('‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏Ç‡∏≠‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡πå‡πÑ‡∏î‡πâ: $e'),
            actions: [
              TextButton(
                onPressed: () => Navigator.of(context).pop(),
                child: const Text('‡∏õ‡∏¥‡∏î'),
              ),
            ],
          ),
        );
      }
    }
  }

  /// ‡∏ü‡∏±‡∏á EventChannel ‡∏à‡∏≤‡∏Å Native ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏£‡∏±‡∏ö‡πÄ‡∏´‡∏ï‡∏∏‡∏Å‡∏≤‡∏£‡∏ì‡πå‡∏à‡∏≤‡∏Å Accessibility ‡∏´‡∏£‡∏∑‡∏≠ Notification
  void _listenToNativeEvents() {
    eventChannel.receiveBroadcastStream().listen(
      (event) {
        debugPrint('üì≤ Event received: $event');
        final context = navigatorKey.currentContext;
        if (context != null) {
          showDialog(
            context: context,
            builder: (_) => AlertDialog(
              title: const Text('‡∏ï‡∏£‡∏ß‡∏à‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ô‡πà‡∏≤‡∏™‡∏á‡∏™‡∏±‡∏¢'),
              content: Text(event.toString()),
              actions: [
                TextButton(
                  onPressed: () => Navigator.of(context).pop(),
                  child: const Text('‡∏õ‡∏¥‡∏î'),
                ),
              ],
            ),
          );
        }
      },
      onError: (error) {
        debugPrint('‚ö†Ô∏è EventChannel error: $error');
        final context = navigatorKey.currentContext;
        if (context != null) {
          ScaffoldMessenger.of(context).showSnackBar(
            SnackBar(
              content: Text('‡∏Å‡∏≤‡∏£‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠ Native ‡∏°‡∏µ‡∏õ‡∏±‡∏ç‡∏´‡∏≤: $error'),
              backgroundColor: Colors.orange,
            ),
          );
        }
      },
    );
>>>>>>> dcb51031a26fa5e977b1ab5746bd5a7fb78ac375
  }

  // ‡πÅ‡∏™‡∏î‡∏á Alert ‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏° Scam
  void _showScamAlert(BuildContext context, String message, String prediction) {
    showDialog(
      context: context,
      barrierDismissible: false,
      builder: (_) => AlertDialog(
        icon: const Icon(Icons.warning, color: Colors.red, size: 48),
        title: const Text('üö® ‡∏ï‡∏£‡∏ß‡∏à‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ï‡πâ‡∏≠‡∏á‡∏™‡∏á‡∏™‡∏±‡∏¢!', 
                         style: TextStyle(color: Colors.red, fontWeight: FontWeight.bold)),
        content: Column(
          mainAxisSize: MainAxisSize.min,
          crossAxisAlignment: CrossAxisAlignment.start,
          children: [
            const Text('‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ô‡∏µ‡πâ‡∏≠‡∏≤‡∏à‡πÄ‡∏õ‡πá‡∏ô SCAM:',
                      style: TextStyle(fontWeight: FontWeight.bold)),
            const SizedBox(height: 8),
            Container(
              padding: const EdgeInsets.all(12),
              decoration: BoxDecoration(
                color: Colors.red.withOpacity(0.1),
                borderRadius: BorderRadius.circular(8),
                border: Border.all(color: Colors.red.withOpacity(0.3)),
              ),
              child: Text(message, style: const TextStyle(fontSize: 14)),
            ),
            const SizedBox(height: 12),
            Text('AI Prediction: ${prediction.toUpperCase()}',
                style: const TextStyle(fontWeight: FontWeight.bold, color: Colors.red)),
          ],
        ),
        actions: [
          TextButton(
            child: const Text('‡∏£‡∏≤‡∏¢‡∏á‡∏≤‡∏ô'),
            onPressed: () {
              Navigator.of(context).pop();
              // TODO: ‡πÑ‡∏õ‡∏´‡∏ô‡πâ‡∏≤‡∏£‡∏≤‡∏¢‡∏á‡∏≤‡∏ô
            },
          ),
          ElevatedButton(
            style: ElevatedButton.styleFrom(backgroundColor: Colors.red),
            child: const Text('‡πÄ‡∏Ç‡πâ‡∏≤‡πÉ‡∏à‡πÅ‡∏•‡πâ‡∏ß', style: TextStyle(color: Colors.white)),
            onPressed: () => Navigator.of(context).pop(),
          ),
        ],
      ),
    );
  }

  // ‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡πÄ‡∏ö‡∏≤‡πÜ ‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏õ‡∏•‡∏≠‡∏î‡∏†‡∏±‡∏¢
  void _showSafeNotification(BuildContext context) {
    ScaffoldMessenger.of(context).showSnackBar(
      const SnackBar(
        content: Row(
          children: [
            Icon(Icons.check_circle, color: Colors.green),
            SizedBox(width: 8),
            Text('‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏õ‡∏•‡∏≠‡∏î‡∏†‡∏±‡∏¢ ‚úÖ'),
          ],
        ),
        backgroundColor: Colors.green,
        duration: Duration(seconds: 2),
      ),
    );
  }

  // ‡πÅ‡∏™‡∏î‡∏á Error Dialog
  void _showErrorDialog(String title, String message) {
    final context = navigatorKey.currentContext;
    if (context != null) {
      showDialog(
        context: context,
        builder: (_) => AlertDialog(
          title: Text(title),
          content: Text(message),
          actions: [
            TextButton(
              child: const Text('‡∏õ‡∏¥‡∏î'),
              onPressed: () => Navigator.of(context).pop(),
            ),
          ],
        ),
      );
    }
  }

  // ‡πÅ‡∏™‡∏î‡∏á Error SnackBar
  void _showErrorSnackBar(String message) {
    final context = navigatorKey.currentContext;
    if (context != null) {
      ScaffoldMessenger.of(context).showSnackBar(
        SnackBar(
          content: Text(message),
          backgroundColor: Colors.orange,
          duration: const Duration(seconds: 4),
        ),
      );
    }
  }

  @override
  Widget build(BuildContext context) {
    return ValueListenableBuilder<ThemeMode>(
      valueListenable: themeModeNotifier,
      builder: (context, themeMode, _) {
        return MaterialApp(
          title: 'Anti-Scam AI',
          navigatorKey: navigatorKey,
          debugShowCheckedModeBanner: false,
          themeMode: themeMode,
          theme: ThemeData(
            brightness: Brightness.light,
            colorSchemeSeed: Colors.deepPurple,
            useMaterial3: true,
          ),
          darkTheme: ThemeData(
            brightness: Brightness.dark,
            colorSchemeSeed: Colors.deepPurple,
            useMaterial3: true,
          ),
          initialRoute: '/',
          routes: {
            '/': (context) => const LoginScreen(),
            '/register': (context) => const RegisterScreen(),
            '/reset-password': (context) => const ResetPasswordScreen(),
            '/permission': (context) => const PermissionScreen(),
            '/main': (context) => MainScreen(themeModeNotifier: themeModeNotifier),
            '/home': (context) => const HomeScreen(),
            '/scan': (context) => const ScanScreen(),
'/stats': (context) => const StatsScreen(scanResults: []), // ‡πÄ‡∏û‡∏¥‡πà‡∏° scanResults: []
            '/profile': (context) => const UserScreen(),
            '/login': (context) => const LoginScreen(),
            '/settings': (context) => SettingsScreen(themeModeNotifier: themeModeNotifier),
            '/history': (context) => const HistoryScreen(),
            '/test-api': (context) => const ApiTestScreen(), // ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏´‡∏ô‡πâ‡∏≤‡∏ó‡∏î‡∏™‡∏≠‡∏ö API
          },
        );
      },
    );
  }
}
<<<<<<< HEAD

// ‚úÖ ‡∏´‡∏ô‡πâ‡∏≤‡∏ó‡∏î‡∏™‡∏≠‡∏ö API (‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö Debug)
class ApiTestScreen extends StatefulWidget {
  const ApiTestScreen({super.key});

  @override
  State<ApiTestScreen> createState() => _ApiTestScreenState();
}

class _ApiTestScreenState extends State<ApiTestScreen> {
  final TextEditingController _controller = TextEditingController();
  String _result = '';
  bool _isLoading = false;

  Future<void> _testMessage() async {
    final text = _controller.text.trim();
    if (text.isEmpty) return;

    setState(() {
      _isLoading = true;
      _result = '‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö...';
    });

    final result = await ApiService.checkMessage(text);

    setState(() {
      _isLoading = false;
      if (result['success'] == true) {
        _result = result['isScam'] == true
            ? 'üö® ‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ô‡πà‡∏≤‡∏™‡∏á‡∏™‡∏±‡∏¢ (SCAM)'
            : '‚úÖ ‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏õ‡∏•‡∏≠‡∏î‡∏†‡∏±‡∏¢ (SAFE)';
      } else {
        _result = '‚ùå Error: ${result['error']}';
      }
    });
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(
        title: const Text('‡∏ó‡∏î‡∏™‡∏≠‡∏ö Anti-Scam AI'),
      ),
      body: Padding(
        padding: const EdgeInsets.all(16),
        child: Column(
          children: [
            TextField(
              controller: _controller,
              decoration: const InputDecoration(
                labelText: '‡∏û‡∏¥‡∏°‡∏û‡πå‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö',
                border: OutlineInputBorder(),
                hintText: '‡πÄ‡∏ä‡πà‡∏ô: ‡∏Ñ‡∏∏‡∏ì‡πÑ‡∏î‡πâ‡∏£‡∏±‡∏ö‡∏£‡∏≤‡∏á‡∏ß‡∏±‡∏• 1 ‡∏•‡πâ‡∏≤‡∏ô‡∏ö‡∏≤‡∏ó ‡∏Å‡∏î‡∏•‡∏¥‡∏á‡∏Å‡πå‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏£‡∏±‡∏ö...',
              ),
              maxLines: 3,
            ),
            const SizedBox(height: 16),
            SizedBox(
              width: double.infinity,
              child: ElevatedButton(
                onPressed: _isLoading ? null : _testMessage,
                child: _isLoading
                    ? const Row(
                        mainAxisAlignment: MainAxisAlignment.center,
                        children: [
                          SizedBox(
                            width: 16,
                            height: 16,
                            child: CircularProgressIndicator(strokeWidth: 2),
                          ),
                          SizedBox(width: 8),
                          Text('‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö...'),
                        ],
                      )
                    : const Text('‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°'),
              ),
            ),
            const SizedBox(height: 24),
            if (_result.isNotEmpty)
              Container(
                width: double.infinity,
                padding: const EdgeInsets.all(16),
                decoration: BoxDecoration(
                  color: _result.contains('SCAM') 
                      ? Colors.red.withOpacity(0.1)
                      : _result.contains('SAFE')
                          ? Colors.green.withOpacity(0.1)
                          : Colors.orange.withOpacity(0.1),
                  borderRadius: BorderRadius.circular(8),
                  border: Border.all(
                    color: _result.contains('SCAM') 
                        ? Colors.red
                        : _result.contains('SAFE')
                            ? Colors.green
                            : Colors.orange,
                  ),
                ),
                child: Text(
                  _result,
                  style: TextStyle(
                    fontSize: 18,
                    fontWeight: FontWeight.bold,
                    color: _result.contains('SCAM') 
                        ? Colors.red
                        : _result.contains('SAFE')
                            ? Colors.green
                            : Colors.orange,
                  ),
                  textAlign: TextAlign.center,
                ),
              ),
            const SizedBox(height: 16),
            const Divider(),
            const Text(
              '‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ó‡∏î‡∏™‡∏≠‡∏ö:',
              style: TextStyle(fontWeight: FontWeight.bold),
            ),
            const SizedBox(height: 8),
            _buildExampleButton('‡∏Ñ‡∏∏‡∏ì‡πÑ‡∏î‡πâ‡∏£‡∏±‡∏ö‡∏£‡∏≤‡∏á‡∏ß‡∏±‡∏• 1 ‡∏•‡πâ‡∏≤‡∏ô‡∏ö‡∏≤‡∏ó! ‡∏Å‡∏î‡∏•‡∏¥‡∏á‡∏Å‡πå‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏£‡∏±‡∏ö‡∏ó‡∏±‡∏ô‡∏ó‡∏µ'),
            _buildExampleButton('‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô‡∏ö‡∏±‡∏ç‡∏ä‡∏µ‡∏ò‡∏ô‡∏≤‡∏Ñ‡∏≤‡∏£‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì ‡∏Ñ‡∏•‡∏¥‡∏Å‡∏ó‡∏µ‡πà‡∏ô‡∏µ‡πà'),
            _buildExampleButton('‡∏™‡∏ß‡∏±‡∏™‡∏î‡∏µ ‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡∏≠‡∏∞‡πÑ‡∏£‡∏≠‡∏¢‡∏π‡πà'),
          ],
        ),
      ),
    );
  }

  Widget _buildExampleButton(String text) {
    return Padding(
      padding: const EdgeInsets.symmetric(vertical: 4),
      child: SizedBox(
        width: double.infinity,
        child: OutlinedButton(
          onPressed: () {
            _controller.text = text;
          },
          child: Text(
            text,
            style: const TextStyle(fontSize: 12),
            maxLines: 1,
            overflow: TextOverflow.ellipsis,
          ),
        ),
      ),
    );
  }
}
=======
>>>>>>> dcb51031a26fa5e977b1ab5746bd5a7fb78ac375
