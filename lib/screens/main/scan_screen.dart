import 'package:flutter/material.dart';
import 'package:google_fonts/google_fonts.dart';
import 'dart:convert';
import 'package:crypto/crypto.dart';
import '../../services/api_service.dart';

class ScanScreen extends StatefulWidget {
  const ScanScreen({Key? key}) : super(key: key);

  @override
  State<ScanScreen> createState() => _ScanScreenState();
}

class _ScanScreenState extends State<ScanScreen>
    with AutomaticKeepAliveClientMixin {
  final TextEditingController _textController = TextEditingController();

  // Cache ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÄ‡∏Å‡πá‡∏ö‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå‡∏Å‡∏≤‡∏£‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå
  static final Map<String, Map<String, dynamic>> _analysisCache = {};

  bool _loading = false;
  bool _hasResult = false;
  bool _isScam = false;
  String _resultText = '';
  String _reason = '';
  double _confidence = 0.0;
  String? _currentRequestId; // ‡∏õ‡πâ‡∏≠‡∏á‡∏Å‡∏±‡∏ô‡∏Å‡∏≤‡∏£‡∏Å‡∏î‡∏ã‡πâ‡∏≥
  bool _apiConnected = true; // ‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏Å‡∏≤‡∏£‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠ API

  @override
  bool get wantKeepAlive => true; // ‡∏Ñ‡∏á state ‡πÑ‡∏ß‡πâ‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏™‡∏•‡∏±‡∏ö‡∏´‡∏ô‡πâ‡∏≤

  @override
  void initState() {
    super.initState();
    _textController.addListener(() {
      setState(() {}); // ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏õ‡∏∏‡πà‡∏°‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö enable/disable ‡∏ï‡∏≤‡∏°‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°
    });
    _checkApiConnection(); // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠ API ‡πÄ‡∏°‡∏∑‡πà‡∏≠‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô
  }

  @override
  void dispose() {
    _textController.dispose();
    super.dispose();
  }

  // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠ API
  Future<void> _checkApiConnection() async {
    final connected = await ApiService.testConnection();
    if (mounted) {
      setState(() {
        _apiConnected = connected;
      });

      if (!connected) {
        ScaffoldMessenger.of(context).showSnackBar(
          SnackBar(
            content: Text('‚ö†Ô∏è ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠ API ‡πÑ‡∏î‡πâ',
                style: GoogleFonts.kanit()),
            backgroundColor: Colors.orange,
            action: SnackBarAction(
              label: '‡∏•‡∏≠‡∏á‡πÉ‡∏´‡∏°‡πà',
              onPressed: _checkApiConnection,
            ),
          ),
        );
      }
    }
  }

  // ‡∏™‡∏£‡πâ‡∏≤‡∏á hash key ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö cache
  String _generateCacheKey(String input) {
    final bytes = utf8.encode(input.toLowerCase().trim());
    final digest = sha256.convert(bytes);
    return digest.toString();
  }

  // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏°‡∏µ‡πÉ‡∏ô cache ‡πÅ‡∏•‡πâ‡∏ß‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
  bool _isCached(String input) {
    final key = _generateCacheKey(input);
    return _analysisCache.containsKey(key);
  }

  // ‡∏î‡∏∂‡∏á‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå‡∏à‡∏≤‡∏Å cache
  Map<String, dynamic>? _getCachedResult(String input) {
    final key = _generateCacheKey(input);
    return _analysisCache[key];
  }

  // ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå‡∏•‡∏á cache
  void _saveToCacheIfValid(String input, Map<String, dynamic> result) {
    if (input.trim().isNotEmpty && result.isNotEmpty) {
      final key = _generateCacheKey(input);
      _analysisCache[key] = result;

      // ‡∏à‡∏≥‡∏Å‡∏±‡∏î‡∏Ç‡∏ô‡∏≤‡∏î cache ‡πÑ‡∏°‡πà‡πÄ‡∏Å‡∏¥‡∏ô 50 ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£
      if (_analysisCache.length > 50) {
        final firstKey = _analysisCache.keys.first;
        _analysisCache.remove(firstKey);
      }
    }
  }

  Future<void> _analyzeText() async {
    final input = _textController.text.trim();
    if (input.isEmpty || _loading) return;

    // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠ API ‡∏Å‡πà‡∏≠‡∏ô
    if (!_apiConnected) {
      ScaffoldMessenger.of(context).showSnackBar(
        SnackBar(
          content:
              Text('‚ùå ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠ API ‡πÑ‡∏î‡πâ', style: GoogleFonts.kanit()),
          backgroundColor: Colors.red,
          action: SnackBarAction(
            label: '‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠',
            onPressed: _checkApiConnection,
          ),
        ),
      );
      return;
    }

    // ‡∏™‡∏£‡πâ‡∏≤‡∏á request ID ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏õ‡πâ‡∏≠‡∏á‡∏Å‡∏±‡∏ô‡∏Å‡∏≤‡∏£‡∏Å‡∏î‡∏ã‡πâ‡∏≥
    final requestId = DateTime.now().millisecondsSinceEpoch.toString();
    _currentRequestId = requestId;

    setState(() {
      _loading = true;
      _hasResult = false;
    });

    try {
      Map<String, dynamic> analysis;

      // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö cache ‡∏Å‡πà‡∏≠‡∏ô
      if (_isCached(input)) {
        print('üìã ‡πÉ‡∏ä‡πâ‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå‡∏à‡∏≤‡∏Å cache');
        analysis = _getCachedResult(input)!;

        // ‡∏à‡∏≥‡∏•‡∏≠‡∏á delay ‡πÄ‡∏•‡πá‡∏Å‡∏ô‡πâ‡∏≠‡∏¢‡πÄ‡∏û‡∏∑‡πà‡∏≠ UX ‡∏ó‡∏µ‡πà‡∏î‡∏µ
        await Future.delayed(const Duration(milliseconds: 300));
      } else {
        print('üîç ‡πÄ‡∏£‡∏µ‡∏¢‡∏Å API Service');
        final result = await ApiService.checkMessage(input);

        if (result['success'] == true) {
          analysis = {
            'isScam': result['isScam'] as bool? ?? false,
            'reason': result['reason'] as String? ?? '‡∏£‡∏∞‡∏ö‡∏ö‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡πÅ‡∏•‡πâ‡∏ß',
            'confidence': result['confidence'] as double? ?? 0.0,
            'prediction': result['prediction'] as String? ?? 'unknown',
          };

          // ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏•‡∏á cache
          _saveToCacheIfValid(input, analysis);
        } else {
          throw Exception(result['error'] ?? 'Unknown API error');
        }
      }

      // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤ request ‡∏ô‡∏µ‡πâ‡∏¢‡∏±‡∏á‡πÄ‡∏õ‡πá‡∏ô request ‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
      if (_currentRequestId != requestId) {
        print('üö´ Request ‡∏ñ‡∏π‡∏Å‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å‡πÄ‡∏û‡∏£‡∏≤‡∏∞‡∏°‡∏µ request ‡πÉ‡∏´‡∏°‡πà');
        return;
      }

      setState(() {
        _isScam = analysis['isScam'] as bool? ?? false;
        _reason = analysis['reason'] as String? ?? '';
        _confidence = analysis['confidence'] as double? ?? 0.0;
        _resultText = _isScam
            ? '‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ô‡∏µ‡πâ‡∏°‡∏µ‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏™‡∏µ‡πà‡∏¢‡∏á‡πÄ‡∏õ‡πá‡∏ô‡∏™‡πÅ‡∏õ‡∏°‡∏´‡∏£‡∏∑‡∏≠‡∏´‡∏•‡∏≠‡∏Å‡∏•‡∏ß‡∏á'
            : '‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ô‡∏µ‡πâ‡∏õ‡∏•‡∏≠‡∏î‡∏†‡∏±‡∏¢';
        _hasResult = true;
      });
    } catch (e) {
      // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤ request ‡∏ô‡∏µ‡πâ‡∏¢‡∏±‡∏á‡πÄ‡∏õ‡πá‡∏ô request ‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
      if (_currentRequestId != requestId) return;

      setState(() {
        _resultText = '‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå: $e';
        _isScam = false;
        _reason = '';
        _confidence = 0.0;
        _hasResult = true;
        _apiConnected = false; // ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏Å‡∏≤‡∏£‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠
      });

      if (mounted) {
        ScaffoldMessenger.of(context).showSnackBar(
          SnackBar(
            content: Text('‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡πÑ‡∏î‡πâ ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏•‡∏≠‡∏á‡πÉ‡∏´‡∏°‡πà',
                style: GoogleFonts.kanit()),
            backgroundColor: Colors.red.shade600,
            action: SnackBarAction(
              label: '‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠',
              onPressed: _checkApiConnection,
            ),
          ),
        );
      }
    } finally {
      if (_currentRequestId == requestId && mounted) {
        setState(() {
          _loading = false;
        });
      }
    }
  }

  void _clearText() {
    _textController.clear();
    setState(() {
      _hasResult = false;
      _resultText = '';
      _reason = '';
      _isScam = false;
      _confidence = 0.0;
    });
  }

  // ‡πÅ‡∏™‡∏î‡∏á‡∏à‡∏≥‡∏ô‡∏ß‡∏ô cache ‡∏ó‡∏µ‡πà‡∏°‡∏µ (‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö debug)
  void _showCacheInfo() {
    if (mounted) {
      ScaffoldMessenger.of(context).showSnackBar(
        SnackBar(
          content: Text('üíæ ‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• cache: ${_analysisCache.length} ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£',
              style: GoogleFonts.kanit()),
          duration: const Duration(seconds: 1),
        ),
      );
    }
  }

  // ‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ó‡∏î‡∏™‡∏≠‡∏ö
  void _insertExampleText(String text) {
    _textController.text = text;
    setState(() {});
  }

  @override
  Widget build(BuildContext context) {
    super.build(context); // ‡∏™‡∏≥‡∏Ñ‡∏±‡∏ç‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö AutomaticKeepAliveClientMixin

    final theme = Theme.of(context);
    final isDark = theme.brightness == Brightness.dark;

    // ‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡∏™‡∏µ‡∏û‡∏∑‡πâ‡∏ô‡∏´‡∏•‡∏±‡∏á Card ‡∏ï‡∏≤‡∏°‡∏ò‡∏µ‡∏°‡πÅ‡∏•‡∏∞‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞ Scam
    Color cardBackgroundColor() {
      if (_isScam) {
        return isDark
            ? Colors.red.shade900.withOpacity(0.3)
            : Colors.red.shade100;
      } else {
        return isDark
            ? Colors.green.shade900.withOpacity(0.3)
            : Colors.green.shade100;
      }
    }

    // ‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡∏™‡∏µ‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå‡∏ï‡∏≤‡∏°‡∏ò‡∏µ‡∏°‡πÅ‡∏•‡∏∞‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞ Scam
    Color resultTextColor() {
      if (_isScam) {
        return isDark ? Colors.red.shade300 : Colors.red.shade700;
      } else {
        return isDark ? Colors.green.shade300 : Colors.green.shade700;
      }
    }

    // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô‡∏°‡∏µ‡πÉ‡∏ô cache ‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
    final currentInput = _textController.text.trim();
    final isCurrentCached = currentInput.isNotEmpty && _isCached(currentInput);

    return Scaffold(
      appBar: AppBar(
        title: Text('‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°', style: GoogleFonts.kanit()),
        actions: [
          // ‡πÅ‡∏™‡∏î‡∏á‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏Å‡∏≤‡∏£‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠ API
          IconButton(
            icon: Icon(
              _apiConnected ? Icons.cloud_done : Icons.cloud_off,
              color: _apiConnected ? Colors.green : Colors.red,
            ),
            onPressed: _checkApiConnection,
            tooltip: _apiConnected ? 'API ‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡πÅ‡∏•‡πâ‡∏ß' : 'API ‡πÑ‡∏°‡πà‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠',
          ),
          // ‡∏õ‡∏∏‡πà‡∏° debug ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏î‡∏π cache info
          if (_analysisCache.isNotEmpty)
            IconButton(
              icon: Badge(
                label: Text('${_analysisCache.length}'),
                child: const Icon(Icons.storage),
              ),
              onPressed: _showCacheInfo,
              tooltip: '‡∏î‡∏π‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• Cache',
            ),
        ],
      ),
      body: SafeArea(
        child: Padding(
          padding: const EdgeInsets.symmetric(horizontal: 16, vertical: 12),
          child: Column(
            children: [
              TextField(
                controller: _textController,
                maxLines: 5,
                maxLength: 500,
                decoration: InputDecoration(
                  labelText: '‡∏ß‡∏≤‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö',
                  labelStyle: GoogleFonts.kanit(
                    color: isDark ? Colors.white70 : Colors.black87,
                  ),
                  border: OutlineInputBorder(
                      borderRadius: BorderRadius.circular(12)),
                  suffixIcon: _textController.text.isEmpty
                      ? null
                      : Row(
                          mainAxisSize: MainAxisSize.min,
                          children: [
                            // ‡πÅ‡∏™‡∏î‡∏á icon cache ‡∏´‡∏≤‡∏Å‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ô‡∏µ‡πâ‡∏°‡∏µ‡πÉ‡∏ô cache
                            if (isCurrentCached)
                              Icon(
                                Icons.cached,
                                color: theme.colorScheme.primary,
                                size: 20,
                              ),
                            IconButton(
                              icon: Icon(Icons.clear,
                                  color: theme.colorScheme.primary),
                              onPressed: _clearText,
                            ),
                          ],
                        ),
                  helperText: isCurrentCached
                      ? 'üíæ ‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ô‡∏µ‡πâ‡πÄ‡∏Ñ‡∏¢‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡πÅ‡∏•‡πâ‡∏ß (‡πÉ‡∏ä‡πâ cache)'
                      : !_apiConnected
                          ? '‚ö†Ô∏è API ‡πÑ‡∏°‡πà‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠'
                          : null,
                  helperStyle: GoogleFonts.kanit(
                    color: !_apiConnected
                        ? Colors.orange
                        : theme.colorScheme.primary,
                    fontSize: 12,
                  ),
                ),
                style: GoogleFonts.kanit(
                  fontSize: 16,
                  color: isDark ? Colors.white : Colors.black,
                ),
                textInputAction: TextInputAction.done,
                cursorColor: theme.colorScheme.primary,
                onSubmitted: (_) => _analyzeText(), // ‡∏Å‡∏î Enter ‡∏Å‡πá‡πÑ‡∏î‡πâ
              ),
              const SizedBox(height: 20),
              SizedBox(
                width: double.infinity,
                child: ElevatedButton.icon(
                  icon: _loading
                      ? SizedBox(
                          width: 20,
                          height: 20,
                          child: CircularProgressIndicator(
                              color: Colors.white, strokeWidth: 2),
                        )
                      : Icon(isCurrentCached ? Icons.cached : Icons.search),
                  label: Text(
                    _loading
                        ? '‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå...'
                        : isCurrentCached
                            ? '‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏° (‡πÄ‡∏£‡πá‡∏ß)'
                            : '‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°',
                    style: GoogleFonts.kanit(fontSize: 18),
                  ),
                  style: ElevatedButton.styleFrom(
                    padding: const EdgeInsets.symmetric(vertical: 14),
                    shape: RoundedRectangleBorder(
                        borderRadius: BorderRadius.circular(12)),
                    backgroundColor: !_apiConnected ? Colors.grey : null,
                  ),
                  onPressed: (_loading ||
                          _textController.text.trim().isEmpty ||
                          !_apiConnected)
                      ? null
                      : _analyzeText,
                ),
              ),

              // ‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ó‡∏î‡∏™‡∏≠‡∏ö
              const SizedBox(height: 16),
              Text(
                '‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ó‡∏î‡∏™‡∏≠‡∏ö:',
                style: GoogleFonts.kanit(
                  fontSize: 14,
                  fontWeight: FontWeight.w600,
                  color: isDark ? Colors.white70 : Colors.black54,
                ),
              ),
              const SizedBox(height: 8),
              Wrap(
                spacing: 8,
                runSpacing: 4,
                children: [
                  _buildExampleChip(
                      '‡∏Ñ‡∏∏‡∏ì‡πÑ‡∏î‡πâ‡∏£‡∏±‡∏ö‡∏£‡∏≤‡∏á‡∏ß‡∏±‡∏• 1 ‡∏•‡πâ‡∏≤‡∏ô‡∏ö‡∏≤‡∏ó! ‡∏Å‡∏î‡∏•‡∏¥‡∏á‡∏Å‡πå‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏£‡∏±‡∏ö‡∏ó‡∏±‡∏ô‡∏ó‡∏µ', true),
                  _buildExampleChip('‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô‡∏ö‡∏±‡∏ç‡∏ä‡∏µ‡∏ò‡∏ô‡∏≤‡∏Ñ‡∏≤‡∏£‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì ‡∏Ñ‡∏•‡∏¥‡∏Å‡∏ó‡∏µ‡πà‡∏ô‡∏µ‡πà', true),
                  _buildExampleChip('‡∏™‡∏ß‡∏±‡∏™‡∏î‡∏µ ‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡∏≠‡∏∞‡πÑ‡∏£‡∏≠‡∏¢‡∏π‡πà', false),
                  _buildExampleChip('‡∏Ç‡∏≠‡∏ö‡∏Ñ‡∏∏‡∏ì‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤ ‡πÑ‡∏î‡πâ‡∏£‡∏±‡∏ö‡πÅ‡∏•‡πâ‡∏ß', false),
                ],
              ),

              const SizedBox(height: 24),
              if (_hasResult)
                Card(
                  shape: RoundedRectangleBorder(
                      borderRadius: BorderRadius.circular(12)),
                  elevation: 3,
                  color: cardBackgroundColor(),
                  child: Padding(
                    padding: const EdgeInsets.all(16),
                    child: Column(
                      crossAxisAlignment: CrossAxisAlignment.start,
                      children: [
                        Row(
                          children: [
                            Icon(
                              _isScam
                                  ? Icons.warning_amber_rounded
                                  : Icons.check_circle_outline,
                              color: resultTextColor(),
                              size: 28,
                            ),
                            const SizedBox(width: 12),
                            Expanded(
                              child: Text(
                                _resultText,
                                style: GoogleFonts.kanit(
                                  fontSize: 18,
                                  fontWeight: FontWeight.w700,
                                  color: resultTextColor(),
                                ),
                              ),
                            ),
                          ],
                        ),
                        if (_confidence > 0) ...[
                          const SizedBox(height: 8),
                          LinearProgressIndicator(
                            value: _confidence,
                            backgroundColor: Colors.grey.withOpacity(0.3),
                            color: _isScam ? Colors.red : Colors.green,
                          ),
                          const SizedBox(height: 4),
                          Text(
                            '‡∏Ñ‡∏ß‡∏≤‡∏°‡∏°‡∏±‡πà‡∏ô‡πÉ‡∏à: ${(_confidence * 100).toStringAsFixed(1)}%',
                            style: GoogleFonts.kanit(
                              fontSize: 12,
                              color: isDark ? Colors.white60 : Colors.black54,
                            ),
                          ),
                        ],
                        if (_reason.isNotEmpty) ...[
                          const SizedBox(height: 12),
                          Text(
                            '‡πÄ‡∏´‡∏ï‡∏∏‡∏ú‡∏•:',
                            style: GoogleFonts.kanit(
                              fontSize: 16,
                              fontWeight: FontWeight.w600,
                              color: isDark ? Colors.white70 : Colors.black87,
                            ),
                          ),
                          const SizedBox(height: 6),
                          Text(
                            _reason,
                            style: GoogleFonts.kanit(
                              fontSize: 14,
                              fontStyle: FontStyle.italic,
                              color: isDark ? Colors.white60 : Colors.black54,
                            ),
                          ),
                        ],
                      ],
                    ),
                  ),
                ),

              // ‡πÅ‡∏™‡∏î‡∏á‡∏™‡∏ñ‡∏¥‡∏ï‡∏¥ cache (‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö debug)
              if (_analysisCache.isNotEmpty)
                Padding(
                  padding: const EdgeInsets.only(top: 16),
                  child: Text(
                    'üíæ ‡∏õ‡∏£‡∏∞‡∏´‡∏¢‡∏±‡∏î API calls: ${_analysisCache.length} ‡∏Ñ‡∏£‡∏±‡πâ‡∏á',
                    style: GoogleFonts.kanit(
                      fontSize: 12,
                      color: isDark ? Colors.white60 : Colors.black54,
                    ),
                  ),
                ),
            ],
          ),
        ),
      ),
    );
  }

  // ‡∏™‡∏£‡πâ‡∏≤‡∏á chip ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°
  Widget _buildExampleChip(String text, bool isScamExample) {
    return ActionChip(
      label: Text(
        text.length > 30 ? '${text.substring(0, 30)}...' : text,
        style: GoogleFonts.kanit(fontSize: 12),
      ),
      onPressed: () => _insertExampleText(text),
      backgroundColor: isScamExample
          ? Colors.red.withOpacity(0.1)
          : Colors.green.withOpacity(0.1),
      side: BorderSide(
        color: isScamExample ? Colors.red : Colors.green,
        width: 1,
      ),
    );
  }
}
